@model List<RachieLib.Models.Book>

<div class="container mx-auto max-w-4xl p-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-6">
        <div class="flex items-center gap-3">
            <div class="text-lg">üìö</div>
            <div>
                <h1 class="text-xl font-semibold">My Library</h1>
                <p class="text-sm text-gray-600">@Model.Count book@(Model.Count != 1 ? "s" : "") in your collection</p>
            </div>
        </div>
        <button onclick="openAddBookModal()" class="px-3 py-1.5 bg-amber-800 text-white rounded-lg hover:bg-amber-700 transition flex items-center gap-2">
            <span class="font-bold text-lg">+</span>
            <span>Add Book</span>
        </button>
    </div>

    @if (!Model.Any())
    {
        <partial name="EmptyBookShelf" />
    }
    else
    {
        <!-- Visual Bookshelf -->
        <div class="relative w-full bg-gradient-to-b from-[#e6d5b8] to-[#d4c4a8] rounded-lg p-4 shadow-xl min-h-[600px] [transform-style:preserve-3d] [perspective:1000px]" style="box-shadow: inset 0 2px 4px rgba(0,0,0,0.1), inset 0 -2px 4px rgba(0,0,0,0.1);">
            <!-- Side trim pieces with shadow -->
            <div class="absolute left-0 inset-y-0 w-6 bg-[#d4c4a8] border-r border-amber-900/20" style="box-shadow: inset -2px 0 4px rgba(0,0,0,0.1);"></div>
            <div class="absolute right-0 inset-y-0 w-6 bg-[#d4c4a8] border-l border-amber-900/20" style="box-shadow: inset 2px 0 4px rgba(0,0,0,0.1);"></div>
            
            <!-- Shelves Container -->
            <div class="flex flex-col gap-1">
                @{
                    var booksPerShelf = 6;
                    var shelves = Model.Select((book, index) => new { Book = book, ShelfIndex = index / booksPerShelf })
                                     .GroupBy(x => x.ShelfIndex)
                                     .ToList();
                    // Create 4 shelves minimum
                    var totalShelves = Math.Max(4, shelves.Count);
                }

                @for (var i = 0; i < totalShelves; i++)
                {
                    var currentShelf = shelves.FirstOrDefault(s => s.Key == i);
                    
                    <div class="relative mb-1">
                        <!-- Shelf background with trim -->
                        <div class="h-48 w-full bg-gradient-to-b from-[#e6d5b8] to-[#d4c4a8] border-b-4 border-t border-amber-900/20 flex items-end px-8 relative" 
                             style="transform: perspective(1000px) rotateX(2deg); transform-origin: center bottom; box-shadow: 0 4px 6px -1px rgba(0,0,0,0.2), inset 0 2px 4px rgba(0,0,0,0.1);">
                            <!-- Wood grain effect -->
                            <div class="absolute inset-0 opacity-10 pointer-events-none">
                                <div class="h-full w-full" style="background: repeating-linear-gradient(90deg, transparent, rgba(0,0,0,0.03) 2px, transparent 4px);"></div>
                            </div>
                            <!-- Shelf shadow effect -->
                            <div class="absolute bottom-0 left-0 right-0 h-4 bg-gradient-to-b from-transparent to-black/10 pointer-events-none"></div>

                            <!-- Books on this shelf -->
                            @if (currentShelf != null)
                            {
                                <div class="flex items-end h-40 w-full gap-1 z-10 relative pl-2" style="transform: translateZ(4px);">
                                    @foreach (var item in currentShelf)
                                    {
                                        var book = item.Book;
                                        var random = new System.Random(book.Title.GetHashCode());
                                        int minWidth = 32;
                                        int maxWidth = 44;
                                        int widthPx = minWidth + random.Next(maxWidth - minWidth + 1);
                                        string width = $"{widthPx}px";
                                        int minHeight = 120;
                                        int maxHeight = 140;
                                        int heightPx = minHeight + random.Next(maxHeight - minHeight + 1);
                                        string height = $"{heightPx}px";
                                        string borderColor = $"rgba({random.Next(60,120)},{random.Next(40,80)},{random.Next(20,40)},0.7)";

                                        <div class="book-spine cursor-pointer transition-transform duration-200 hover:scale-105 hover:translate-z-2 flex flex-col items-center justify-end select-none shadow-lg rounded-sm border-2"
                                             style="width:@width; height:@height; border-color:@borderColor; background:rgba(0,0,0,0.04); box-shadow: -2px 2px 4px rgba(0,0,0,0.1);"
                                             onclick="location.href='/Home/Details/@book.ISBN'">
                                            @if (!string.IsNullOrWhiteSpace(book.CoverImageUrl))
                                            {
                                                <img src="@book.CoverImageUrl" alt="@book.Title cover" class="w-full h-full object-cover rounded-md border border-gray-300" style="max-width:100%; max-height:100%;" />
                                            }
                                            else
                                            {
                                                var spineColor = !string.IsNullOrWhiteSpace(book.SpineColor) ? book.SpineColor : $"hsl({random.Next(0,360)},70%,45%)";
                                                <div class="flex flex-col justify-between items-center w-full h-full rounded-md"
                                                     style="background:@spineColor;">
                                                    <span class="text-xs font-bold text-white whitespace-nowrap overflow-hidden text-ellipsis px-1 py-2" 
                                                          style="writing-mode:vertical-rl; transform:rotate(180deg); letter-spacing:0.1em;">
                                                        @book.Title
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Navigation Links -->
    <div class="mt-4 space-x-4 text-blue-600 font-medium">
        <a href="/Add">‚ûï Add Book</a>
        <a href="/Search">üîç Search</a>
        <a href="/Remove">üóëÔ∏è Remove</a>
    </div>
</div>